{
    "modules": [
        {
            "module_id": "java_basics",
            "module_name": "Introduction to Java & Basic Syntax",
            "questions": [
                {
                    "question_text": "What is Java?",
                    "options": ["A programming language", "A database", "An OS", "A web framework"],
                    "correct_option": "A programming language",
                    "explanation": "Java is a high-level, object-oriented programming language developed by Sun Microsystems (now owned by Oracle). It is designed to be platform-independent, meaning it can run on multiple operating systems through the Java Virtual Machine (JVM)."
                },
                {
                    "question_text": "Which keyword is used to define a class in Java?",
                    "options": ["class", "struct", "interface", "object"],
                    "correct_option": "class",
                    "explanation": "The 'class' keyword is used to declare a new class in Java. It defines a blueprint for creating objects, encapsulating data and behavior for a specific type of object."
                },
                {
                    "question_text": "Which function serves as the entry point of a Java program?",
                    "options": ["start()", "main()", "execute()", "run()"],
                    "correct_option": "main()",
                    "explanation": "The main() method is the entry point for any Java application. It is a static method with a specific signature: public static void main(String[] args), which allows the Java Virtual Machine to start executing the program."
                },
                {
                    "question_text": "Which package is automatically imported in Java?",
                    "options": ["java.util", "java.io", "java.lang", "javax.swing"],
                    "correct_option": "java.lang",
                    "explanation": "java.lang is the only package automatically imported in every Java program. It contains fundamental classes like String, Object, System, and wrapper classes that are essential for Java programming."
                },
                {
                    "question_text": "Which data type is used to store a single character?",
                    "options": ["char", "string", "Character", "byte"],
                    "correct_option": "char",
                    "explanation": "The 'char' data type in Java is used to store a single 16-bit Unicode character. It can represent letters, numbers, symbols, and special characters."
                },
                {
                    "question_text": "Which operator is used for comments in Java?",
                    "options": ["//", "#", "/* */", "--"],
                    "correct_option": "//",
                    "explanation": "'//' is used for single-line comments in Java. For multi-line comments, '/* */' is used. Comments are ignored by the compiler and are used to explain code or temporarily disable code."
                },
                {
                    "question_text": "What is bytecode in Java?",
                    "options": ["Compiled source code", "Machine code", "Intermediate code executed by JVM", "A scripting language"],
                    "correct_option": "Intermediate code executed by JVM",
                    "explanation": "Bytecode is an intermediate representation of Java code that is platform-independent. It is generated by the Java compiler and can be executed by the Java Virtual Machine on any platform."
                },
                {
                    "question_text": "Which keyword is used to create an object in Java?",
                    "options": ["new", "create", "instance", "object"],
                    "correct_option": "new",
                    "explanation": "The 'new' keyword is used to create an instance of a class (an object) in Java. It allocates memory for the object and calls the constructor to initialize its state."
                },
                {
                    "question_text": "Which statement is used to print output in Java?",
                    "options": ["print()", "System.out.print()", "console.log()", "display()"],
                    "correct_option": "System.out.print()",
                    "explanation": "System.out.print() is the standard method used to print output to the console in Java. System.out is a PrintStream object, and print() methods allow printing various data types."
                },
                {
                    "question_text": "Which extension is used for Java source files?",
                    "options": [".java", ".class", ".js", ".jav"],
                    "correct_option": ".java",
                    "explanation": ".java is the file extension for Java source code files. These files contain human-readable Java code that is compiled into .class files by the Java compiler."
                }
            ]
        },
        {
            "module_id": "java_control_flow",
            "module_name": "Operators and Control Flow",
            "questions": [
                {
                    "question_text": "Which operator is used for logical AND in Java?",
                    "options": ["&", "&&", "and", "||"],
                    "correct_option": "&&",
                    "explanation": "The '&&' (double ampersand) is the logical AND operator in Java. It returns true only if both operands are true, and short-circuits (stops evaluating) if the first operand is false."
                },
                {
                    "question_text": "Which statement is used for conditional execution?",
                    "options": ["if", "for", "while", "switch"],
                    "correct_option": "if",
                    "explanation": "The 'if' statement is used for conditional execution in Java. It allows the program to execute a block of code only if a specified condition is true."
                },
                {
                    "question_text": "Which loop is used when the number of iterations is known?",
                    "options": ["while", "do-while", "for", "foreach"],
                    "correct_option": "for",
                    "explanation": "The 'for' loop is ideal when the number of iterations is known in advance. It provides a compact way to initialize, test, and increment/decrement a loop counter in a single line."
                },
                {
                    "question_text": "Which statement is used to terminate a loop?",
                    "options": ["exit", "break", "continue", "stop"],
                    "correct_option": "break",
                    "explanation": "The 'break' statement is used to immediately exit or terminate a loop. When encountered, it causes the program to jump out of the current loop and continue executing the next statement after the loop."
                },
                {
                    "question_text": "Which keyword is used for a switch-case block?",
                    "options": ["case", "switch", "choose", "if"],
                    "correct_option": "switch",
                    "explanation": "The 'switch' keyword is used to create a switch-case block in Java. It allows testing a variable against multiple possible values and executing different code blocks based on those values."
                },
                {
                    "question_text": "Which operator is used for modulus operation in Java?",
                    "options": ["/", "%", "mod", "*"],
                    "correct_option": "%",
                    "explanation": "The '%' (percent) operator performs the modulus operation in Java. It returns the remainder when one number is divided by another, which is useful for checking divisibility and creating cyclic operations."
                },
                {
                    "question_text": "Which loop executes at least once regardless of condition?",
                    "options": ["for", "while", "do-while", "foreach"],
                    "correct_option": "do-while",
                    "explanation": "The 'do-while' loop guarantees that the loop body is executed at least once before checking the condition. This is different from 'while' loop, which checks the condition before the first iteration."
                },
                {
                    "question_text": "Which statement is used to skip an iteration of a loop?",
                    "options": ["break", "skip", "continue", "exit"],
                    "correct_option": "continue",
                    "explanation": "The 'continue' statement skips the current iteration of a loop and moves to the next iteration. When encountered, it immediately jumps to the next loop iteration without executing the remaining code in that iteration."
                },
                {
                    "question_text": "Which operator is used for ternary conditional evaluation?",
                    "options": [":?", "?:", "??", "if-else"],
                    "correct_option": "?:",
                    "explanation": "The '?:' (ternary) operator is a shorthand way of writing an if-else statement in a single line. It takes three operands and can replace simple if-else logic with a more concise syntax."
                },
                {
                    "question_text": "Which keyword is used to define a constant in Java?",
                    "options": ["final", "const", "define", "static"],
                    "correct_option": "final",
                    "explanation": "The 'final' keyword is used to create constants in Java. When applied to a variable, it means the value cannot be changed once assigned. It prevents modification of the variable's value after initialization."
                }
            ]
        },
        {
            "module_id": "java_oop",
            "module_name": "Object-Oriented Programming (OOP) Concepts",
            "questions": [
                {
                    "question_text": "Which keyword is used to define a class in Java?",
                    "options": ["class", "struct", "interface", "object"],
                    "correct_option": "class",
                    "explanation": "The 'class' keyword defines a blueprint for creating objects. It encapsulates data and behavior, serving as the fundamental building block of object-oriented programming in Java."
                },
                {
                    "question_text": "What is the principle of Encapsulation in Java?",
                    "options": ["Hiding implementation details", "Multiple inheritance", "Overloading functions", "Using static variables"],
                    "correct_option": "Hiding implementation details",
                    "explanation": "Encapsulation is the OOP principle of hiding internal object details and providing a public interface. It is typically achieved using private variables and public getter/setter methods, protecting data from direct external access."
                },
                {
                    "question_text": "Which keyword is used for inheritance in Java?",
                    "options": ["extends", "implements", "inherits", "super"],
                    "correct_option": "extends",
                    "explanation": "'extends' is used to create a child class that inherits properties and methods from a parent class. It allows for code reuse and establishes an 'is-a' relationship between classes."
                },
                {
                    "question_text": "Which feature allows a class to have multiple methods with the same name but different parameters?",
                    "options": ["Encapsulation", "Overloading", "Overriding", "Abstraction"],
                    "correct_option": "Overloading",
                    "explanation": "Method overloading allows a class to have multiple methods with the same name but different parameter lists. The compiler determines which method to call based on the number, type, and order of arguments."
                },
                {
                    "question_text": "Which OOP principle allows one interface to be used for multiple data types?",
                    "options": ["Encapsulation", "Polymorphism", "Abstraction", "Inheritance"],
                    "correct_option": "Polymorphism",
                    "explanation": "Polymorphism allows objects of different types to be treated uniformly. It enables a single interface to represent different underlying forms (implementations), typically achieved through method overriding and interfaces."
                },
                {
                    "question_text": "Which method is called automatically when an object is created?",
                    "options": ["initialize()", "constructor", "create()", "new()"],
                    "correct_option": "constructor",
                    "explanation": "A constructor is a special method called automatically when an object is instantiated. It initializes the object's state and can take parameters to set initial values for object attributes."
                },
                {
                    "question_text": "What is an abstract class in Java?",
                    "options": ["A class that cannot be instantiated", "A class with only static methods", "A class that supports multiple inheritance", "A class without variables"],
                    "correct_option": "A class that cannot be instantiated",
                    "explanation": "An abstract class cannot be directly instantiated and may contain abstract methods (methods without implementation). It serves as a base class for other classes and can provide a common interface and partial implementation."
                },
                {
                    "question_text": "Which keyword is used to prevent a method from being overridden?",
                    "options": ["private", "static", "final", "protected"],
                    "correct_option": "final",
                    "explanation": "The 'final' keyword, when applied to a method, prevents that method from being overridden by subclasses. This ensures the method's implementation remains consistent across all child classes."
                },
                {
                    "question_text": "Which Java feature enables runtime method binding?",
                    "options": ["Early binding", "Static binding", "Dynamic binding", "Manual binding"],
                    "correct_option": "Dynamic binding",
                    "explanation": "Dynamic binding (late binding) allows the JVM to determine which method implementation to call at runtime based on the actual object type, enabling polymorphic behavior."
                },
                {
                    "question_text": "What is the default access specifier for class members in Java?",
                    "options": ["private", "protected", "public", "package-private"],
                    "correct_option": "package-private",
                    "explanation": "Package-private (default) access means a class member is accessible only within the same package. If no access modifier is specified, the member has package-private visibility."
                }
            ]
        },
        {
            "module_id": "java_memory_management",
            "module_name": "Memory Management and Garbage Collection",
            "questions": [
                {
                    "question_text": "How is memory managed in Java?",
                    "options": ["Manually by the programmer", "Through pointers", "Automatically by the JVM", "Using malloc() and free()"],
                    "correct_option": "Automatically by the JVM",
                    "explanation": "Java uses automatic memory management through the Java Virtual Machine (JVM). The JVM handles memory allocation and deallocation, relieving developers from manual memory management and reducing the risk of memory leaks."
                },
                {
                    "question_text": "Which area of memory is used for storing objects in Java?",
                    "options": ["Stack", "Heap", "Register", "Static"],
                    "correct_option": "Heap",
                    "explanation": "The Heap is the runtime data area where objects are stored. Unlike the stack, which stores method calls and primitive local variables, the heap allows dynamic memory allocation for objects during program execution."
                },
                {
                    "question_text": "Which Java feature automatically reclaims unused memory?",
                    "options": ["Destructor", "Garbage Collection", "Deallocation", "Manual cleanup"],
                    "correct_option": "Garbage Collection",
                    "explanation": "Garbage Collection is an automatic memory management mechanism in Java that identifies and removes objects that are no longer referenced by the program, freeing up memory resources."
                },
                {
                    "question_text": "Which keyword prevents an object from being garbage collected?",
                    "options": ["final", "static", "volatile", "transient"],
                    "correct_option": "final",
                    "explanation": "The 'final' keyword itself does not prevent garbage collection. It makes a reference unchangeable, but the object can still be collected if no references to it exist. The explanation in the original JSON seems incorrect."
                },
                {
                    "question_text": "Which method is used to request garbage collection in Java?",
                    "options": ["dispose()", "gc()", "collect()", "System.gc()"],
                    "correct_option": "System.gc()",
                    "explanation": "System.gc() is a method that suggests the JVM perform garbage collection. However, it's not guaranteed to immediately collect garbage, as the actual timing is decided by the JVM."
                },
                {
                    "question_text": "What is a memory leak in Java?",
                    "options": ["When memory is allocated but not deallocated", "When an object cannot be garbage collected", "When a program runs out of stack memory", "When a variable is declared but never used"],
                    "correct_option": "When an object cannot be garbage collected",
                    "explanation": "A memory leak occurs when objects are no longer needed by the application but remain referenced, preventing the garbage collector from removing them and freeing up memory."
                },
                {
                    "question_text": "Which part of memory stores method calls and local variables?",
                    "options": ["Heap", "Stack", "Static", "Register"],
                    "correct_option": "Stack",
                    "explanation": "The Stack memory stores method calls, local variables, and partial results. Each thread has its own stack, and it follows a Last-In-First-Out (LIFO) structure for managing method invocations."
                },
                {
                    "question_text": "Which process removes unused objects from memory?",
                    "options": ["Heap sorting", "Memory swapping", "Garbage collection", "Compaction"],
                    "correct_option": "Garbage collection",
                    "explanation": "Garbage collection is the process of identifying and removing objects that are no longer referenced by the application, thus freeing up memory resources automatically."
                },
                {
                    "question_text": "Which Java feature prevents memory fragmentation?",
                    "options": ["Garbage collection", "Memory pooling", "Defragmentation", "Manual allocation"],
                    "correct_option": "Garbage collection",
                    "explanation": "Garbage collection helps reduce memory fragmentation by compacting memory and removing unused objects, though modern garbage collectors use sophisticated algorithms to minimize fragmentation."
                },
                {
                    "question_text": "Which algorithm is used in Java garbage collection?",
                    "options": ["Mark and Sweep", "FIFO", "Bubble Sort", "Round Robin"],
                    "correct_option": "Mark and Sweep",
                    "explanation": "Mark and Sweep is a classic garbage collection algorithm where the collector first 'marks' all objects that are still in use, then 'sweeps' away (removes) the unmarked objects that are no longer needed."
                }
            ]
        },
        {
            "module_id": "java_exceptions",
            "module_name": "Exception Handling in Java",
            "questions": [
                {
                    "question_text": "Which keyword is used to handle exceptions in Java?",
                    "options": ["try", "catch", "finally", "throw"],
                    "correct_option": "try",
                    "explanation": "The 'try' keyword is used to enclose the code that might throw an exception. It works in conjunction with 'catch' blocks to handle potential runtime errors."
                },
                {
                    "question_text": "Which block is always executed in a try-catch structure?",
                    "options": ["try", "catch", "finally", "throw"],
                    "correct_option": "finally",
                    "explanation": "The 'finally' block is always executed, whether an exception occurs or not. It's typically used for cleanup operations like closing resources, regardless of whether an exception was thrown."
                },
                {
                    "question_text": "Which exception is thrown when dividing by zero in Java?",
                    "options": ["IOException", "NullPointerException", "ArithmeticException", "ArrayIndexOutOfBoundsException"],
                    "correct_option": "ArithmeticException",
                    "explanation": "ArithmeticException is thrown when an illegal arithmetic operation is attempted, such as dividing an integer by zero. It indicates a mathematical error in the program."
                },
                {
                    "question_text": "What is the superclass of all exceptions in Java?",
                    "options": ["Object", "Throwable", "Exception", "RuntimeException"],
                    "correct_option": "Throwable",
                    "explanation": "Throwable is the root class of the exception hierarchy in Java. All exceptions and errors inherit from this class, including Error and Exception classes."
                },
                {
                    "question_text": "Which statement is used to explicitly throw an exception?",
                    "options": ["raise", "throw", "throws", "exception"],
                    "correct_option": "throw",
                    "explanation": "The 'throw' keyword is used to explicitly throw an exception from a method or block of code, allowing developers to create and propagate custom exception scenarios."
                },
                {
                    "question_text": "Which keyword is used to specify that a method may throw an exception?",
                    "options": ["throw", "throws", "try", "catch"],
                    "correct_option": "throws",
                    "explanation": "The 'throws' keyword in a method signature indicates that the method might throw a specific type of exception, requiring calling methods to handle or further declare the exception."
                },
                {
                    "question_text": "Which type of exception must be handled or declared in Java?",
                    "options": ["Checked Exception", "Unchecked Exception", "Runtime Exception", "All of the above"],
                    "correct_option": "Checked Exception",
                    "explanation": "Checked exceptions are compile-time exceptions that must be either caught using try-catch or declared in the method's throws clause. They ensure explicit error handling."
                },
                {
                    "question_text": "What is the purpose of the 'catch' block?",
                    "options": ["To handle exceptions", "To define a method", "To initialize a variable", "To execute a loop"],
                    "correct_option": "To handle exceptions",
                    "explanation": "The 'catch' block is used to handle specific types of exceptions that may be thrown in the corresponding try block, providing error handling and recovery mechanisms."
                },
                {
                    "question_text": "Which exception is thrown when accessing an invalid array index?",
                    "options": ["ArrayIndexOutOfBoundsException", "IOException", "NumberFormatException", "IllegalArgumentException"],
                    "correct_option": "ArrayIndexOutOfBoundsException",
                    "explanation": "ArrayIndexOutOfBoundsException is thrown when attempting to access an array element with an index that is less than zero or greater than or equal to the array's length."
                },
                {
                    "question_text": "Which exception is thrown when a null reference is accessed?",
                    "options": ["IOException", "NullPointerException", "ArithmeticException", "IllegalStateException"],
                    "correct_option": "NullPointerException",
                    "explanation": "NullPointerException is thrown when trying to use a reference variable that points to a null object, such as calling a method on or accessing a field of a null reference."
                }
            ]
        },
        {
            "module_id": "java_collections",
            "module_name": "Collections Framework & Generics",
            "questions": [
                {
                    "question_text": "Which interface represents a collection of objects in Java?",
                    "options": ["Set", "List", "Queue", "Collection"],
                    "correct_option": "Collection",
                    "explanation": "The Collection interface is the root interface in the Java Collections hierarchy. It defines the basic operations that all collection types must implement, such as adding, removing, and querying elements."
                },
                {
                    "question_text": "Which class implements a dynamic array in Java?",
                    "options": ["ArrayList", "LinkedList", "Vector", "HashSet"],
                    "correct_option": "ArrayList",
                    "explanation": "ArrayList is a resizable array implementation that allows dynamic sizing. It provides fast random access and is more efficient for storing and accessing elements compared to a traditional array."
                },
                {
                    "question_text": "Which collection does not allow duplicate elements?",
                    "options": ["List", "Set", "Queue", "Map"],
                    "correct_option": "Set",
                    "explanation": "A Set is a collection that cannot contain duplicate elements. It ensures unique elements and provides methods for set operations like union, intersection, and difference."
                },
                {
                    "question_text": "Which class implements a doubly linked list in Java?",
                    "options": ["ArrayList", "LinkedList", "Vector", "HashMap"],
                    "correct_option": "LinkedList",
                    "explanation": "LinkedList is a doubly-linked list implementation that allows efficient insertions and deletions. Each element (node) contains references to both the previous and next elements in the list."
                },
                {
                    "question_text": "Which collection allows key-value pairs?",
                    "options": ["Set", "List", "Queue", "Map"],
                    "correct_option": "Map",
                    "explanation": "A Map is a collection that stores key-value pairs, where each key is unique. It allows efficient retrieval of values based on their corresponding keys."
                },
                {
                    "question_text": "Which generic type parameter is commonly used in Java?",
                    "options": ["T", "E", "K", "All of the above"],
                    "correct_option": "All of the above",
                    "explanation": "In Java generics, different type parameters are conventionally used: T for Type, E for Element, K for Key, V for Value. These are just conventions and can be used interchangeably."
                },
                {
                    "question_text": "Which interface represents a last-in, first-out (LIFO) structure?",
                    "options": ["Queue", "Stack", "Deque", "PriorityQueue"],
                    "correct_option": "Stack",
                    "explanation": "A Stack is a last-in, first-out (LIFO) data structure where the last element added is the first one to be removed. In Java, the Stack class provides methods like push(), pop(), and peek()."
                },
                {
                    "question_text": "Which Java collection maintains elements in a sorted order?",
                    "options": ["TreeSet", "HashSet", "ArrayList", "LinkedList"],
                    "correct_option": "TreeSet",
                    "explanation": "TreeSet is a sorted set implementation that maintains its elements in ascending order. It uses a Red-Black tree internally to ensure efficient sorting and retrieval."
                },
                {
                    "question_text": "Which class should be used for a high-performance map with constant-time retrieval?",
                    "options": ["TreeMap", "HashMap", "LinkedHashMap", "WeakHashMap"],
                    "correct_option": "HashMap",
                    "explanation": "HashMap provides constant-time performance for basic operations like get and put, making it ideal for scenarios requiring fast key-value storage and retrieval."
                },
                {
                    "question_text": "Which method is used to add an element to an ArrayList?",
                    "options": ["insert()", "add()", "put()", "push()"],
                    "correct_option": "add()",
                    "explanation": "The add() method is used to append an element to the end of an ArrayList or insert an element at a specific index. It dynamically resizes the array as needed."
                }
            ]
        },
        {
            "module_id": "java_multithreading",
            "module_name": "Multithreading and Concurrency",
            "questions": [
                {
                    "question_text": "Which class is used to create a thread in Java?",
                    "options": ["Thread", "Runnable", "Executor", "Task"],
                    "correct_option": "Thread",
                    "explanation": "The Thread class is used to create and manage threads in Java. It provides methods for thread lifecycle management like start(), sleep(), and join()."
                },
                {
                    "question_text": "Which method starts a thread in Java?",
                    "options": ["run()", "start()", "execute()", "begin()"],
                    "correct_option": "start()",
                    "explanation": "The start() method is used to begin thread execution. It creates a new thread and calls the run() method, allowing the thread to execute concurrently with other threads."
                },
                {
                    "question_text": "Which interface must be implemented for multithreading in Java?",
                    "options": ["Runnable", "Thread", "Callable", "Executor"],
                    "correct_option": "Runnable",
                    "explanation": "The Runnable interface is used to define the task that a thread will execute. It provides a run() method that contains the code to be run in a separate thread."
                },
                {
                    "question_text": "Which keyword is used to prevent thread interference?",
                    "options": ["static", "volatile", "synchronized", "final"],
                    "correct_option": "synchronized",
                    "explanation": "The synchronized keyword prevents multiple threads from simultaneously accessing the same method or block of code, ensuring thread-safe access to shared resources."
                },
                {
                    "question_text": "Which method pauses the execution of a thread?",
                    "options": ["sleep()", "wait()", "suspend()", "halt()"],
                    "correct_option": "sleep()",
                    "explanation": "The sleep() method temporarily pauses the execution of a thread for a specified number of milliseconds, allowing other threads to execute."
                },
                {
                    "question_text": "Which method waits for a thread to finish execution?",
                    "options": ["stop()", "wait()", "join()", "end()"],
                    "correct_option": "join()",
                    "explanation": "The join() method causes the current thread to pause execution until the thread it is called on completes its execution, allowing for thread synchronization."
                },
                {
                    "question_text": "Which package contains the concurrency utilities in Java?",
                    "options": ["java.util", "java.concurrent", "java.util.concurrent", "java.threads"],
                    "correct_option": "java.util.concurrent",
                    "explanation": "The java.util.concurrent package provides advanced thread-safe collections, executor services, and synchronization utilities for concurrent programming."
                },
                {
                    "question_text": "Which collection is thread-safe in Java?",
                    "options": ["HashMap", "ArrayList", "ConcurrentHashMap", "LinkedList"],
                    "correct_option": "ConcurrentHashMap",
                    "explanation": "ConcurrentHashMap is a thread-safe version of HashMap that allows concurrent read and write operations without blocking the entire map."
                },
                {
                    "question_text": "Which executor service method creates a fixed thread pool?",
                    "options": ["newFixedThreadPool()", "newCachedThreadPool()", "newSingleThreadExecutor()", "newScheduledThreadPool()"],
                    "correct_option": "newFixedThreadPool()",
                    "explanation": "newFixedThreadPool() creates a thread pool with a fixed number of threads. If all threads are busy, new tasks will wait in a queue until a thread becomes available."
                },
                {
                    "question_text": "Which mechanism prevents deadlocks in multithreading?",
                    "options": ["Thread Priority", "Locks", "Avoid nested locks", "Interrupt"],
                    "correct_option": "Avoid nested locks",
                    "explanation": "Avoiding nested locks is a key strategy to prevent deadlocks. Deadlocks occur when multiple threads are waiting for each other to release resources, creating a circular dependency."
                }
            ]
        },
        {
            "module_id": "java_advanced",
            "module_name": "Advanced Topics and Optimization Techniques",
            "questions": [
                {
                    "question_text": "Which keyword is used to define an immutable class in Java?",
                    "options": ["static", "final", "constant", "sealed"],
                    "correct_option": "final",
                    "explanation": "The 'final' keyword prevents a class from being inherited. When applied to a class, it ensures the class cannot be extended, which is often used to create immutable classes."
                },
                {
                    "question_text": "Which feature improves performance by reducing redundant computations?",
                    "options": ["Loop Unrolling", "Common Subexpression Elimination", "Inlining", "Dead Code Elimination"],
                    "correct_option": "Common Subexpression Elimination",
                    "explanation": "Common Subexpression Elimination is an optimization technique that identifies and eliminates redundant computational steps, reducing unnecessary calculations and improving code efficiency."
                },
                {
                    "question_text": "Which Java technology improves code execution efficiency?",
                    "options": ["JIT Compiler", "Garbage Collection", "JVM", "Class Loader"],
                    "correct_option": "JIT Compiler",
                    "explanation": "The Just-In-Time (JIT) Compiler dynamically compiles bytecode to native machine code at runtime, significantly improving the execution speed of Java applications."
                },
                {
                    "question_text": "Which JVM optimization technique removes unused code?",
                    "options": ["Dead Code Elimination", "Inlining", "Loop Optimization", "Garbage Collection"],
                    "correct_option": "Dead Code Elimination",
                    "explanation": "Dead Code Elimination is an optimization technique that removes code that has no effect on the program's output, reducing unnecessary computations and improving performance."
                },
                {
                    "question_text": "Which Java feature is used to manage memory efficiently?",
                    "options": ["Garbage Collection", "Memory Pooling", "Heap Management", "Stack Allocation"],
                    "correct_option": "Garbage Collection",
                    "explanation": "Garbage Collection automatically manages memory by identifying and removing objects that are no longer in use, preventing memory leaks and efficiently managing system resources."
                },
                {
                    "question_text": "Which tool is used for Java performance profiling?",
                    "options": ["JProfiler", "VisualVM", "JConsole", "All of the above"],
                    "correct_option": "All of the above",
                    "explanation": "JProfiler, VisualVM, and JConsole are all powerful tools for analyzing Java application performance, memory usage, and thread behavior."
                },
                {
                    "question_text": "Which optimization technique reduces method call overhead?",
                    "options": ["Inlining", "Recursion", "Pointer arithmetic", "Heap allocation"],
                    "correct_option": "Inlining",
                    "explanation": "Inlining is an optimization technique where the compiler replaces a method call with the method's actual code, eliminating the overhead of method invocation."
                },
                {
                    "question_text": "Which feature allows Java applications to execute faster?",
                    "options": ["Bytecode", "Native Compilation", "Dynamic Linking", "Just-in-Time Compilation"],
                    "correct_option": "Just-in-Time Compilation",
                    "explanation": "Just-in-Time (JIT) Compilation converts Java bytecode to native machine code at runtime, allowing for dynamic optimization and significantly improving execution speed."
                },
                {
                    "question_text": "Which feature helps manage large Java codebases efficiently?",
                    "options": ["Modules", "Packages", "Interfaces", "Annotations"],
                    "correct_option": "Modules",
                    "explanation": "Java Modules introduced in Java 9 provide a way to explicitly declare dependencies between different parts of an application, improving encapsulation and making large codebases more manageable."
                },
                {
                    "question_text": "Which approach reduces memory fragmentation in Java?",
                    "options": ["Garbage Collection", "Memory Pooling", "Defragmentation", "Manual Allocation"],
                    "correct_option": "Memory Pooling",
                    "explanation": "Memory Pooling is a technique where objects are pre-allocated in a pool and reused, reducing the overhead of constant object creation and helping to minimize memory fragmentation."
                }
            ]
        }
    ]
}