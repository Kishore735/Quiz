{
    "modules": [
        {
            "module_id": "python_basics",
            "module_name": "Python Basics",
            "questions": [
                {
                    "question_text": "What is Python?",
                    "options": ["A programming language", "A snake", "A type of coffee", "A car brand"],
                    "correct_option": "A programming language"
                },
                {
                    "question_text": "Which keyword is used to define a function in Python?",
                    "options": ["def", "func", "define", "lambda"],
                    "correct_option": "def"
                },
                {
                    "question_text": "Which symbol is used for comments in Python?",
                    "options": ["//", "#", "/* */", "--"],
                    "correct_option": "#"
                },
                {
                    "question_text": "Which of the following is a valid variable name in Python?",
                    "options": ["2var", "my-var", "_myvar", "if"],
                    "correct_option": "_myvar"
                },
                {
                    "question_text": "Which function is used to take user input?",
                    "options": ["input()", "read()", "scan()", "get()"],
                    "correct_option": "input()"
                },
                {
                    "question_text": "Which operator is used for exponentiation?",
                    "options": ["^", "**", "//", "*"],
                    "correct_option": "**"
                },
                {
                    "question_text": "Which statement is used to exit a loop?",
                    "options": ["exit", "break", "stop", "end"],
                    "correct_option": "break"
                },
                {
                    "question_text": "Which of these is NOT a Python keyword?",
                    "options": ["elif", "switch", "try", "with"],
                    "correct_option": "switch"
                },
                {
                    "question_text": "What is the default value of a Boolean variable?",
                    "options": ["True", "False", "0", "None"],
                    "correct_option": "False"
                },
                {
                    "question_text": "Which function converts a string to an integer?",
                    "options": ["int()", "str()", "float()", "char()"],
                    "correct_option": "int()"
                }
            ]
        },
        {
            "module_id": "python_control_flow",
            "module_name": "Operators and Control Flow",
            "questions": [
                {
                    "question_text": "Which operator is used for logical AND in Python?",
                    "options": ["&", "&&", "and", "||"],
                    "correct_option": "and"
                },
                {
                    "question_text": "Which statement is used for conditional execution?",
                    "options": ["if", "for", "while", "switch"],
                    "correct_option": "if"
                },
                {
                    "question_text": "Which loop is used when the number of iterations is known?",
                    "options": ["while", "do-while", "for", "foreach"],
                    "correct_option": "for"
                },
                {
                    "question_text": "Which statement is used to terminate a loop?",
                    "options": ["exit", "break", "continue", "stop"],
                    "correct_option": "break"
                },
                {
                    "question_text": "Which keyword is used for a switch-case block in Python?",
                    "options": ["case", "switch", "match", "if"],
                    "correct_option": "match"
                },
                {
                    "question_text": "Which operator is used for modulus operation in Python?",
                    "options": ["/", "%", "mod", "*"],
                    "correct_option": "%"
                },
                {
                    "question_text": "Which loop executes at least once regardless of condition?",
                    "options": ["for", "while", "do-while", "None of the above"],
                    "correct_option": "None of the above"
                },
                {
                    "question_text": "Which statement is used to skip an iteration of a loop?",
                    "options": ["break", "skip", "continue", "exit"],
                    "correct_option": "continue"
                },
                {
                    "question_text": "Which operator is used for ternary conditional evaluation in Python?",
                    "options": [":?", "?:", "if-else", "None of the above"],
                    "correct_option": "if-else"
                },
                {
                    "question_text": "Which keyword is used to define a constant in Python?",
                    "options": ["final", "const", "define", "Python has no built-in constant keyword"],
                    "correct_option": "Python has no built-in constant keyword"
                }
            ]
        },
        {
            "module_id": "python_functions_scope",
            "module_name": "Functions and Scope",
            "questions": [
                {
                    "question_text": "Which keyword is used to define a function in Python?",
                    "options": ["function", "def", "func", "define"],
                    "correct_option": "def"
                },
                {
                    "question_text": "What is the default return value of a function that does not explicitly return a value?",
                    "options": ["0", "None", "False", "Undefined"],
                    "correct_option": "None"
                },
                {
                    "question_text": "Which keyword is used to return a value from a function?",
                    "options": ["return", "send", "output", "yield"],
                    "correct_option": "return"
                },
                {
                    "question_text": "What is the purpose of the 'global' keyword in Python?",
                    "options": ["To define a global variable", "To access a global variable inside a function", "To declare a constant", "To import a module"],
                    "correct_option": "To access a global variable inside a function"
                },
                {
                    "question_text": "Which keyword is used to define an anonymous function in Python?",
                    "options": ["anonymous", "lambda", "def", "func"],
                    "correct_option": "lambda"
                },
                {
                    "question_text": "What is a function that calls itself called?",
                    "options": ["Recursive function", "Anonymous function", "Lambda function", "Nested function"],
                    "correct_option": "Recursive function"
                },
                {
                    "question_text": "Which keyword is used to define a function inside a class?",
                    "options": ["def", "method", "function", "class"],
                    "correct_option": "def"
                },
                {
                    "question_text": "What is the term for a function inside another function?",
                    "options": ["Inner function", "Subfunction", "Recursive function", "Static function"],
                    "correct_option": "Inner function"
                },
                {
                    "question_text": "Which statement is used to end the execution of a function and return a value?",
                    "options": ["stop", "break", "return", "exit"],
                    "correct_option": "return"
                },
                {
                    "question_text": "Which parameter allows a function to accept an arbitrary number of arguments?",
                    "options": ["*args", "**kwargs", "varargs", "list"],
                    "correct_option": "*args"
                }
            ]
        },
        {
            "module_id": "python_oop",
            "module_name": "Object-Oriented Programming (OOP) Concepts",
            "questions": [
                {
                    "question_text": "Which keyword is used to define a class in Python?",
                    "options": ["class", "struct", "object", "type"],
                    "correct_option": "class"
                },
                {
                    "question_text": "Which method is called automatically when an object is created?",
                    "options": ["__init__", "__new__", "__start__", "__create__"],
                    "correct_option": "__init__"
                },
                {
                    "question_text": "Which principle of OOP is used to hide implementation details?",
                    "options": ["Encapsulation", "Inheritance", "Polymorphism", "Abstraction"],
                    "correct_option": "Encapsulation"
                },
                {
                    "question_text": "Which function allows a class to inherit from another class?",
                    "options": ["super()", "parent()", "base()", "inherit()"],
                    "correct_option": "super()"
                },
                {
                    "question_text": "Which keyword is used to create a subclass?",
                    "options": ["extends", "inherits", "super", "None of the above"],
                    "correct_option": "None of the above"
                },
                {
                    "question_text": "Which OOP principle allows multiple functions with the same name but different implementations?",
                    "options": ["Encapsulation", "Inheritance", "Polymorphism", "Abstraction"],
                    "correct_option": "Polymorphism"
                },
                {
                    "question_text": "Which keyword is used to indicate a method should not be overridden in a subclass?",
                    "options": ["final", "static", "private", "Python does not enforce this"],
                    "correct_option": "Python does not enforce this"
                },
                {
                    "question_text": "Which method is used to destroy an object in Python?",
                    "options": ["__del__", "__destroy__", "__delete__", "__remove__"],
                    "correct_option": "__del__"
                },
                {
                    "question_text": "Which decorator is used to define a class method?",
                    "options": ["@staticmethod", "@classmethod", "@property", "@method"],
                    "correct_option": "@classmethod"
                },
                {
                    "question_text": "Which function is used to check if an object is an instance of a specific class?",
                    "options": ["type()", "isinstance()", "issubclass()", "check()"],
                    "correct_option": "isinstance()"
                }
            ]
        },
        {
            "module_id": "python_exceptions",
            "module_name": "Exception Handling in Python",
            "questions": [
                {
                    "question_text": "Which keyword is used to handle exceptions in Python?",
                    "options": ["try", "catch", "finally", "throw"],
                    "correct_option": "try"
                },
                {
                    "question_text": "Which block is always executed in a try-except structure?",
                    "options": ["try", "except", "finally", "throw"],
                    "correct_option": "finally"
                },
                {
                    "question_text": "Which exception is raised when dividing by zero in Python?",
                    "options": ["ZeroDivisionError", "ValueError", "ArithmeticException", "TypeError"],
                    "correct_option": "ZeroDivisionError"
                },
                {
                    "question_text": "What is the base class of all exceptions in Python?",
                    "options": ["Exception", "BaseException", "Error", "Object"],
                    "correct_option": "BaseException"
                },
                {
                    "question_text": "Which statement is used to explicitly raise an exception?",
                    "options": ["raise", "throw", "error", "except"],
                    "correct_option": "raise"
                },
                {
                    "question_text": "Which keyword is used to define an exception block in Python?",
                    "options": ["catch", "handle", "except", "try"],
                    "correct_option": "except"
                },
                {
                    "question_text": "Which exception is raised when an invalid index is accessed in a list?",
                    "options": ["IndexError", "KeyError", "ValueError", "TypeError"],
                    "correct_option": "IndexError"
                },
                {
                    "question_text": "Which exception is raised when an undefined variable is accessed?",
                    "options": ["NameError", "ReferenceError", "SyntaxError", "TypeError"],
                    "correct_option": "NameError"
                },
                {
                    "question_text": "Which statement is used to handle multiple exceptions in one block?",
                    "options": ["multi", "except", "try-except", "except (Exception1, Exception2)"],
                    "correct_option": "except (Exception1, Exception2)"
                },
                {
                    "question_text": "Which built-in function provides information about an exception?",
                    "options": ["info()", "traceback()", "str()", "print_exc()"],
                    "correct_option": "print_exc()"
                }
            ]
        },
        {
            "module_id": "python_collections",
            "module_name": "Collections and Data Structures",
            "questions": [
                {
                    "question_text": "Which data structure stores unique elements in Python?",
                    "options": ["List", "Tuple", "Set", "Dictionary"],
                    "correct_option": "Set"
                },
                {
                    "question_text": "Which collection type maintains key-value pairs?",
                    "options": ["Set", "List", "Dictionary", "Tuple"],
                    "correct_option": "Dictionary"
                },
                {
                    "question_text": "Which data structure allows duplicate values?",
                    "options": ["Set", "List", "Dictionary", "Queue"],
                    "correct_option": "List"
                },
                {
                    "question_text": "Which method adds an element to a list?",
                    "options": ["insert()", "add()", "append()", "put()"],
                    "correct_option": "append()"
                },
                {
                    "question_text": "Which function retrieves the number of elements in a collection?",
                    "options": ["count()", "size()", "length()", "len()"],
                    "correct_option": "len()"
                },
                {
                    "question_text": "Which collection follows the Last In First Out (LIFO) principle?",
                    "options": ["Queue", "Stack", "Deque", "Set"],
                    "correct_option": "Stack"
                },
                {
                    "question_text": "Which method removes a key-value pair from a dictionary?",
                    "options": ["delete()", "remove()", "pop()", "discard()"],
                    "correct_option": "pop()"
                },
                {
                    "question_text": "Which function sorts a list in Python?",
                    "options": ["order()", "arrange()", "sort()", "classify()"],
                    "correct_option": "sort()"
                },
                {
                    "question_text": "Which collection is best suited for fast lookups?",
                    "options": ["List", "Tuple", "Set", "Dictionary"],
                    "correct_option": "Dictionary"
                },
                {
                    "question_text": "Which module provides specialized container datatypes?",
                    "options": ["collections", "dataclasses", "struct", "array"],
                    "correct_option": "collections"
                }
            ]
        },
        {
            "module_id": "python_multithreading",
            "module_name": "Multithreading and Concurrency",
            "questions": [
                {
                    "question_text": "Which module in Python provides multithreading support?",
                    "options": ["thread", "multiprocessing", "concurrent", "threading"],
                    "correct_option": "threading"
                },
                {
                    "question_text": "Which method starts a new thread in Python?",
                    "options": ["run()", "start()", "execute()", "begin()"],
                    "correct_option": "start()"
                },
                {
                    "question_text": "Which keyword is used to prevent race conditions in multithreading?",
                    "options": ["lock", "mutex", "synchronized", "acquire"],
                    "correct_option": "lock"
                },
                {
                    "question_text": "Which function makes a thread sleep for a specified time?",
                    "options": ["wait()", "pause()", "sleep()", "halt()"],
                    "correct_option": "sleep()"
                },
                {
                    "question_text": "Which method ensures a thread completes before continuing execution?",
                    "options": ["join()", "wait()", "stop()", "terminate()"],
                    "correct_option": "join()"
                },
                {
                    "question_text": "Which Python module supports parallel processing?",
                    "options": ["threading", "concurrent", "asyncio", "multiprocessing"],
                    "correct_option": "multiprocessing"
                },
                {
                    "question_text": "Which feature helps prevent deadlocks in multithreading?",
                    "options": ["Thread priority", "Lock acquisition timeout", "Nested locks", "Blocking I/O"],
                    "correct_option": "Lock acquisition timeout"
                },
                {
                    "question_text": "Which threading method checks if a thread is active?",
                    "options": ["is_alive()", "isRunning()", "isActive()", "isThreading()"],
                    "correct_option": "is_alive()"
                },
                {
                    "question_text": "Which library provides thread pooling in Python?",
                    "options": ["threading", "multiprocessing", "concurrent.futures", "asyncio"],
                    "correct_option": "concurrent.futures"
                },
                {
                    "question_text": "Which statement best describes Python's Global Interpreter Lock (GIL)?",
                    "options": ["Allows true parallel execution", "Prevents multiple threads from executing Python bytecode simultaneously", "Removes need for thread synchronization", "Only applies to multiprocessing module"],
                    "correct_option": "Prevents multiple threads from executing Python bytecode simultaneously"
                }
            ]
        },
        {
            "module_id": "python_advanced",
            "module_name": "Advanced Topics and Optimization Techniques",
            "questions": [
                {
                    "question_text": "Which Python implementation is optimized for performance?",
                    "options": ["CPython", "PyPy", "Jython", "IronPython"],
                    "correct_option": "PyPy"
                },
                {
                    "question_text": "Which module is used for Just-In-Time (JIT) compilation in Python?",
                    "options": ["numba", "cython", "pypy", "jitpy"],
                    "correct_option": "numba"
                },
                {
                    "question_text": "Which Python feature improves execution speed for repeated function calls?",
                    "options": ["Caching", "Loop unrolling", "Code injection", "Lazy evaluation"],
                    "correct_option": "Caching"
                },
                {
                    "question_text": "Which function measures execution time in Python?",
                    "options": ["time.clock()", "timeit.timeit()", "datetime.now()", "sys.benchmark()"],
                    "correct_option": "timeit.timeit()"
                },
                {
                    "question_text": "Which optimization technique removes redundant computations?",
                    "options": ["Loop unrolling", "Common subexpression elimination", "Inlining", "Dead code elimination"],
                    "correct_option": "Common subexpression elimination"
                },
                {
                    "question_text": "Which module is commonly used for memory profiling in Python?",
                    "options": ["sys", "memory_profiler", "gc", "resource"],
                    "correct_option": "memory_profiler"
                },
                {
                    "question_text": "Which statement best describes Python's garbage collection?",
                    "options": ["Manually managed", "Automatically managed with reference counting and cyclic garbage collector", "Only reference counting", "Only mark and sweep"],
                    "correct_option": "Automatically managed with reference counting and cyclic garbage collector"
                },
                {
                    "question_text": "Which built-in Python tool detects performance bottlenecks?",
                    "options": ["cProfile", "memory_profiler", "timeit", "trace"],
                    "correct_option": "cProfile"
                },
                {
                    "question_text": "Which data structure is best for fast lookups?",
                    "options": ["List", "Set", "Dictionary", "Tuple"],
                    "correct_option": "Dictionary"
                },
                {
                    "question_text": "Which Python feature reduces memory fragmentation?",
                    "options": ["Garbage collection", "Memory pooling", "Heap allocation", "Stack allocation"],
                    "correct_option": "Memory pooling"
                }
            ]
        }
    ]
}



